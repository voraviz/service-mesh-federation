# https://github.com/maistra/istio-operator/blob/maistra-2.0/pkg/apis/maistra/v2/smcp_new.yaml
apiVersion: maistra.io/v2
kind: ServiceMeshControlPlane
metadata:
  name: dc2-mesh
  namespace: dc2-istio-system
spec:
  cluster:
    name: dc2-cluster
  version: v2.1  # Change this to match your OSSM Version
  tracing:
    sampling: 10000 # scaled integer, 0-100% in 0.01% increments, i.e. 1=.001%, 100=1%, 10000=100%
    type: Jaeger
  proxy:
   networking:
    trafficControl:
      outbound:
        policy: ALLOW_ANY # Change to REGISTRY_ONLY to block by default
    accessLogging:
      file:
        encoding: TEXT
        name: /dev/stdout 
  security:
    trust:
      domain: dc2-mesh.local
    dataPlane:
      mtls: false
      automtls: false
    controlPlane:
      mtls: false
      automtls: false
  policy:
    type: Istiod # or Mixer or Remote, Mixer is default for pre v2.0
  telemetry:
    type: Istiod
  gateways:
    additionalEgress:
      dc1-mesh-egress:
        enabled: true
        requestedNetworkView:
        - network-dc1-mesh
        routerMode: sni-dnat
        service:
          metadata:
            labels:
              federation.maistra.io/egress-for: dc1-mesh
          ports:
          - port: 15443
            name: tls
          - port: 8188
            name: http-discovery  #note HTTP here
    additionalIngress:
      dc1-mesh-ingress:
        enabled: true
        routerMode: sni-dnat
        service:
          type: LoadBalancer
          metadata:
            labels:
              federation.maistra.io/ingress-for: dc1-mesh
            annotations:
              # use the network load balancer on AWS
              service.beta.kubernetes.io/aws-load-balancer-type: nlb
          ports:
          - port: 15443
            name: tls
          - port: 8188
            name: https-discovery  #note HTTPS here
    openshiftRoute:
      enabled: true
    ingress:
        enabled: true
        runtime:
          container:
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 512Mi
          deployment:
            autoScaling:
              maxReplicas: 4
              minReplicas: 1
              targetCPUUtilizationPercentage: 85
              enabled: true
            podDisruption:
              enabled: false
            pod:
              tolerations:
              - key: node.kubernetes.io/unreachable
                operator: Exists
                effect: NoExecute
                tolerationSeconds: 60
        # service:
        #   type: ClusterIP
    # egress:
    #     enabled: false
  general:
    logging:
      # componentLevels:
      #   default: info
      logAsJSON: false
      validationMessages: false
  addons:
    grafana:
      enabled: true
    jaeger:
      install:
        storage:
          type: Memory
    kiali:
      enabled: true
    prometheus:
      enabled: true
  runtime:
    defaults:
      container:
        imagePullPolicy: Always
    components:
      prometheus:                   
        deployment:
          replicas: 1
        podDisruption:
          enabled: false
          minAvailable: 1
        pod:
          tolerations:
          - key: node.kubernetes.io/unreachable
            operator: Exists
            effect: NoExecute
            tolerationSeconds: 60
    # defaults:
    #   deployment:
    #     podDisruption:
    #       enabled: false
    #       minAvailable: 1

